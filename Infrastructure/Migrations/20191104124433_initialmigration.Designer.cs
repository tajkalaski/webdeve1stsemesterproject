// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RespaunceV2.Infrastructure.Persistence;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ReportingDbContext))]
    [Migration("20191104124433_initialmigration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LanguageId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.AssessmentQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssessmentId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ResponsiblePersonId");

                    b.Property<string>("SubQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("SubQuestionId");

                    b.ToTable("AssessmentQuestions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CertificateSubRating", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CreatedById");

                    b.ToTable("CertificatesSubRating");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<float?>("AnnualRevenue");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("Employees");

                    b.Property<string>("FinancialYearEnd");

                    b.Property<string>("FinancialYearStart");

                    b.Property<string>("LegalFormId");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.Property<string>("PostalCode");

                    b.Property<bool>("Public");

                    b.Property<string>("TypeOfOwnershipId");

                    b.Property<string>("VATIN");

                    b.HasKey("Id");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeOfOwnershipId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateId");

                    b.Property<DateTime>("CertifiedFrom");

                    b.Property<DateTime>("CertifiedTo");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("OverallRating");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("CompanyCertificates");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificateSubRating", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateSubRatingId");

                    b.Property<string>("CompanyCertificateId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Score");

                    b.HasKey("Id");

                    b.HasIndex("CertificateSubRatingId");

                    b.HasIndex("CompanyCertificateId");

                    b.HasIndex("CreatedById");

                    b.ToTable("CompanyCertificateSubRatings");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificateSubRatingAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Approved");

                    b.Property<string>("CompanyCertificateSubRatingId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<DateTime>("From");

                    b.Property<string>("Title");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCertificateSubRatingId");

                    b.HasIndex("CreatedById");

                    b.ToTable("CompanyCertificateSubRatingActions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanySupplier", b =>
                {
                    b.Property<string>("CompanyId");

                    b.Property<string>("SupplierId");

                    b.HasKey("CompanyId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.DataEntry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DivisionId");

                    b.Property<DateTime>("From");

                    b.Property<string>("Name");

                    b.Property<string>("SubquestionId");

                    b.Property<DateTime>("To");

                    b.Property<double>("Value");

                    b.Property<string>("WorksiteId");

                    b.Property<string>("companyId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SubquestionId");

                    b.HasIndex("WorksiteId");

                    b.HasIndex("companyId");

                    b.ToTable("DataEntries");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Division", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.LegalForm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LegalForms");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<string>("QuestionSubCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSubCategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionCategoryTranslation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<string>("QuestionCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("QuestionCategoryTranslations");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionSubCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<string>("QuestionCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("QuestionSubCategories");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionSubCategoryTranslation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<string>("QuestionSubCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionSubCategoryId");

                    b.ToTable("QuestionSubCategoryTranslations");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionTranslation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<string>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTranslations");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Expires");

                    b.Property<string>("RemoteIpAddress");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ReportingStandard", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReportingStandards");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ReportingStandardQuestion", b =>
                {
                    b.Property<string>("QuestionId");

                    b.Property<string>("ReportingStandardId");

                    b.Property<string>("Id");

                    b.HasKey("QuestionId", "ReportingStandardId");

                    b.HasIndex("ReportingStandardId");

                    b.ToTable("ReportingStandardQuestions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ResponsiblePerson", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ResponsiblePersons");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.SubQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<string>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SubQuestions");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.SubQuestionTranslation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<string>("SubQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubQuestionId");

                    b.ToTable("SubQuestionTranslations");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.TypeOfOwnership", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TypesOfOwnership");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Worksite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedById")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DivisionId");

                    b.Property<string>("PostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DivisionId");

                    b.ToTable("Worksites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("RespaunceV2.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("RespaunceV2.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Assessment", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany("Assessments")
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.AssessmentQuestion", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Assessment", "Assessment")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("CreatedById");

                    b.HasOne("RespaunceV2.Core.Models.ResponsiblePerson", "ResponsiblePerson")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("RespaunceV2.Core.Models.SubQuestion", "SubQuestion")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("SubQuestionId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Certificate", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CertificateSubRating", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Certificate", "Certificate")
                        .WithMany("CertificateSubRatings")
                        .HasForeignKey("CertificateId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Company", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId");

                    b.HasOne("RespaunceV2.Core.Models.Company", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("RespaunceV2.Core.Models.TypeOfOwnership", "TypeOfOwnership")
                        .WithMany()
                        .HasForeignKey("TypeOfOwnershipId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificate", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId");

                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany("CompanyCertificates")
                        .HasForeignKey("CompanyId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificateSubRating", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.CertificateSubRating", "CertificateSubRating")
                        .WithMany()
                        .HasForeignKey("CertificateSubRatingId");

                    b.HasOne("RespaunceV2.Core.Models.CompanyCertificate", "CompanyCertificate")
                        .WithMany("CompanyCertificateSubRatings")
                        .HasForeignKey("CompanyCertificateId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanyCertificateSubRatingAction", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.CompanyCertificateSubRating")
                        .WithMany("CertificateSubRatingActions")
                        .HasForeignKey("CompanyCertificateSubRatingId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.CompanySupplier", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RespaunceV2.Core.Models.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.DataEntry", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany("QuestionData")
                        .HasForeignKey("CreatedById");

                    b.HasOne("RespaunceV2.Core.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("RespaunceV2.Core.Models.SubQuestion", "Subquestion")
                        .WithMany("QuestionData")
                        .HasForeignKey("SubquestionId");

                    b.HasOne("RespaunceV2.Core.Models.Worksite", "Worksite")
                        .WithMany()
                        .HasForeignKey("WorksiteId");

                    b.HasOne("RespaunceV2.Core.Models.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Division", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Question", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.QuestionSubCategory", "QuestionSubCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSubCategoryId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionCategoryTranslation", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("RespaunceV2.Core.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("QuestionCategoryTranslations")
                        .HasForeignKey("QuestionCategoryId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionSubCategory", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("QuestionSubCategories")
                        .HasForeignKey("QuestionCategoryId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionSubCategoryTranslation", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("RespaunceV2.Core.Models.QuestionSubCategory", "QuestionSubCategory")
                        .WithMany("QuestionSubCategoryTranslations")
                        .HasForeignKey("QuestionSubCategoryId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.QuestionTranslation", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("RespaunceV2.Core.Models.Question", "Question")
                        .WithMany("QuestionTranslations")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.RefreshToken", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ReportingStandardQuestion", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Question", "Question")
                        .WithMany("ReportingStandard")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RespaunceV2.Core.Models.ReportingStandard", "ReportingStandard")
                        .WithMany("Question")
                        .HasForeignKey("ReportingStandardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.ResponsiblePerson", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.SubQuestion", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Question", "Question")
                        .WithMany("SubQuestions")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.SubQuestionTranslation", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("RespaunceV2.Core.Models.SubQuestion", "SubQuestion")
                        .WithMany("SubQuestionTranslations")
                        .HasForeignKey("SubQuestionId");
                });

            modelBuilder.Entity("RespaunceV2.Core.Models.Worksite", b =>
                {
                    b.HasOne("RespaunceV2.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("RespaunceV2.Core.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("RespaunceV2.Core.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");
                });
#pragma warning restore 612, 618
        }
    }
}
